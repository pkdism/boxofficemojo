#install.packages("dplyr")
library(dplyr)
#install.packages("tidyr")
library(tidyr)
#install.packages("stringr")
library(stringr)
#install.packages("scatterD3")
library(scatterD3)
load_data <- function(viewers){
data <- read.table(viewers,header = TRUE, quote="", sep = "\t")
return (data)
}
merge_data_left_join <- function(content_users, total_users, geo_level){
result = merge(content_users,total_users,by = geo_level, all.x  = TRUE)
return (result)
}
genre_tags <- function(content){
genre <- content["genre"]
genre_matrix = data.frame(do.call('rbind', strsplit(as.character(genre$genre),",",fixed = TRUE)))
tags = data.frame(tag = c(as.matrix(genre_matrix)))
tags = unique(tags)
#write.csv(tags, file = "tags.csv")
return (tags)
}
show_count_per_tags <- function(content, tags){
matr <- list()
i = 1
for(tags in tags$tag){
temp <- content %>%
filter(str_detect(genre,toString(tags)))
matr[toString(tags)] <- nrow(temp)
i = i + 1
}
result <- data.frame(unlist(matr))
colnames(result) = c("nshows")
return (result)
}
source("get_genre_tags.r")
content <- read.table("../../../data/content_with_more_than_1000_60s_sessions-jan-2015-nov-2016.tsv", sep = "\t", header = TRUE,quote = "")
content_tags <- genre_tags(content)
movies <- content %>%
filter(grepl("MV",tmsid))
movie_tags <- genre_tags(movies)
shows <- content %>%
filter(!grepl("MV", tmsid))
show_tags <- genre_tags(shows)
news <- shows %>%
filter(str_detect(genre,"News"))
news_tags <- genre_tags(news)
not_news <- shows %>%
filter(!str_detect(genre,"News"))
not_news_tags <- genre_tags(not_news)
#pending
#sports
#pending
#non_sports
source("content_per_genre_tag.r")
show_count_of_all_contents = show_count_per_tags(content,content_tags)
show_count_of_movie_tags = show_count_per_tags(movies,movie_tags)
show_count_of_show_tags = show_count_per_tags(shows,show_tags)
show_count_of_news_tags = show_count_per_tags(news,news_tags)
show_count_of_not_news_tags = show_count_per_tags(not_news,not_news_tags)
source("load_data.r")
source("merge_data_left_join.r")
calculate_mean_sd <- function(tag_users,content_users,total_users,show_details, level){
result <- merge_data_left_join(tag_users, total_users, level)
result <- result[!(is.na(result$users.x) & !is.na(result$users.y)),]
result$score <- with(result, result$users.x / result$users.y)
show_id_score <- result %>%
group_by(tmsid) %>%
summarise(sum = sum(score), local_mean = mean(score))
show_id_score$score_mean_overall <- with(show_id_score, show_id_score$sum / 219.0)
show_id_score$score_mean_overall <- with(show_id_score, show_id_score$sum / 219.0)
show_wise_means_sd<- result %>%
merge(show_id_score,by = "tmsid") %>%
group_by(tmsid) %>%
summarise(sum = sum((score-score_mean_overall)*(score-score_mean_overall)), dma_count = n(), score_mean_overall=max(score_mean_overall), local_mean = max(local_mean)) %>%
mutate(score_sd = sqrt(sum/219.0 + (219-dma_count)*score_mean_overall*score_mean_overall/219.0))
show_wise_means_sd <- merge(show_wise_means_sd,show_details, by.x = "tmsid", by.y = "show_tms_id", all.x = TRUE)
return (show_wise_means_sd)
#  filtered_show_wise_means_sd <- show_wise_means_sd %>%
#    filter(score_sd>0.002)
#
# scatterD3(data = filtered_show_wise_means_sd, x = local_mean, y = score_sd, lab = show_title)
}
source("load_data.r")
source("categorisation.r")
source("calculate_mean_sd.r")
show_details <- load_data("../../../data/show_tms_id-show_title-all.tsv")
content_users <- load_data("../../../data/show_tms_id-dma-users-jan-2015-nov-2016.tsv")
names(content_users) = c("tmsid", "dma", "users")
total_users <- load_data("../../../data/dma-users-jan-2015-nov-2016.tsv")
#total number of users watching movies per dma
movie_users <- merge(movies[c("tmsid")], content_users, by.x = "tmsid", by.y = "tmsid", all.x = TRUE)
#total number of users watching shows (all content except movies) per dma
shows_users <- merge(shows[c("tmsid")], content_users, by.x = "tmsid", by.y = "tmsid", all.x = TRUE)
#total number of users watching news per dma
news_users <- merge(news[c("tmsid")], content_users, by.x = "tmsid", by.y = "tmsid", all.x = TRUE)
#total number of users watching all shows except news per dma
not_news_users <- merge(not_news[c("tmsid")], content_users, by.x = "tmsid", by.y = "tmsid", all.x = TRUE)
#total number of users watching sports per dma
#pending
#total number of users watching all shows content except news and sports
#pending
all_content_mean_sd <- calculate_mean_sd(content_users, content_users,total_users,show_details,"dma")
source("calculate_mean_sd.r")
all_content_mean_sd <- calculate_mean_sd(content_users, content_users,total_users,show_details,"dma")
movies_mean_sd <- calculate_mean_sd(movie_users, content_users,total_users,show_details,"dma")
shows_mean_sd <- calculate_mean_sd(shows_users, content_users,total_users,show_details,"dma")
news_mean_sd <- calculate_mean_sd(news_users, content_users,total_users,show_details,"dma")
not_news_mean_sd <- calculate_mean_sd(not_news_users, content_users,total_users,show_details,"dma")
#pending
#sports_mean_sd <- calculate_mean_sd(sports_users, content_users,total_users,show_details,"dma")
#not_sports_mean_sd <- calculate_mean_sd(not_sports_users, content_users,total_users,show_details,"dma")
scatterD3(data = all_content_mean_sd, x = local_mean, y = score_sd, lab = show_title)
scatterD3(data = movies_mean_sd, x = local_mean, y = score_sd, lab = show_title)
scatterD3(data = shows_mean_sd, x = local_mean, y = score_sd, lab = show_title)
scatterD3(data = news_mean_sd, x = local_mean, y = score_sd, lab = show_title)
scatterD3(data = not_news_mean_sd, x = local_mean, y = score_sd, lab = show_title)
#pending
#scatterD3(data = sports_mean_sd, x = local_mean, y = score_sd, lab = show_title)
#scatterD3(data = not_sports_mean_sd, x = local_mean, y = score_sd, lab = show_title)
scatterD3(data = all_content_mean_sd, x = local_mean, y = score_sd, lab = genre)
scatterD3(data = movies_mean_sd, x = local_mean, y = score_sd, lab = genre)
scatterD3(data = shows_mean_sd, x = local_mean, y = score_sd, lab = genre)
scatterD3(data = news_mean_sd, x = local_mean, y = score_sd, lab = genre)
scatterD3(data = not_news_mean_sd, x = local_mean, y = score_sd, lab = genre)
#pending
#scatterD3(data = sports_mean_sd, x = local_mean, y = score_sd, lab = genre)
#scatterD3(data = not_sports_mean_sd, x = local_mean, y = score_sd, lab = genre)
citation()
contributors()
library("dplyr")
setwd("C:/Users/Pawan.Dwivedi/Desktop/Research Paper/boxofficemojo/src/r")
library("scatterD3")
library("ggmap")
library("mapproj")
boxofficemojo <- read.csv("../../data/europe_2016.tsv",header = TRUE, quote="", sep = "\t")
boxofficemojo$gross <- as.character(boxofficemojo$gross)
boxofficemojo$gross <- as.character(sub('\\$','',boxofficemojo$gross))
boxofficemojo$gross <- as.character(sub('\"','',boxofficemojo$gross))
boxofficemojo$gross <- as.character(sub('"','',boxofficemojo$gross))
boxofficemojo$gross <- as.character(sub(',','',boxofficemojo$gross))
boxofficemojo$gross <- as.character(sub(',','',boxofficemojo$gross))
boxofficemojo$gross <- as.numeric(boxofficemojo$gross)
boxofficemojo$country <- sub('"','',boxofficemojo$country)
boxofficemojo$country <- sub('"','',boxofficemojo$country)
boxofficemojo$title <- sub('"','',boxofficemojo$title)
boxofficemojo$title <- sub('"','',boxofficemojo$title)
total.gross.country <- boxofficemojo %>% group_by(country) %>% summarise(gross.country = sum(gross))
total.gross.title <- boxofficemojo %>% group_by(title) %>% summarise(gross.title = sum(gross))
data <- inner_join(boxofficemojo, total.gross.title, by = "title")
data <- inner_join(data, total.gross.country, by = "country")
data <- data[c("title","country", "gross", "gross.country")]
data$gross.score <-  with(data, data$gross/data$gross.country)
data <- data %>% filter(gross.score > 0.01)
movie.countrycount <- data %>% group_by(title) %>%
summarise(count.country = n())
data <- inner_join(data,movie.countrycount, by = "title")
data <- data %>% filter(count.country > 4)
movie.country.score <- data[c("title","country","gross.score")]
movie.country.score <- movie.country.score[-1482,]
movie.stats <- movie.country.score %>%
group_by(title) %>%
summarise(score.mean = mean(gross.score), score.sd = sd(gross.score))
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
View(movie.stats)
library("scatterD3")
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
str(movie.stats)
View(movie.stats)
scatterD3(data = movie.stats, x = score.mean, y = score.sd)
hist(movie.stats$score.mean)
hist(movie.stats$score.sd)
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
source("../../src/r/main.r")
library(reshape2)
library("tidyr")
get_data <- function(pc){
x <- summary(pc)
vars <- x$sdev^2
vars <- vars/sum(vars)
temp <- data.frame(rbind("SD" = x$sdev, "POV" = vars,
"CP" = cumsum(vars)))
i = 1
for(i in 1:ncol(temp)){
if(temp["CP", i] >= 0.90) break
}
data <- data.frame(pc$x[,1:i])
data = data[1:nrow(data),]
return(data)
}
movie.score.matrix <- spread(movie.country.score,country,gross.score)
movie.score.matrix[is.na(movie.score.matrix)] = 0
rownames(movie.score.matrix) <- movie.score.matrix[,1]
movie.score.matrix <- movie.score.matrix[,-1]
country.score.matrix <- spread(movie.country.score,title, gross.score)
country.score.matrix[is.na(country.score.matrix)] = 0
rownames(country.score.matrix) <- country.score.matrix[,1]
country.score.matrix <- country.score.matrix[,-1]
movie.pc <- prcomp(movie.score.matrix, center = TRUE, scale = TRUE)
country.pc <- prcomp(country.score.matrix, center = TRUE, scale = TRUE)
movie.pc.data <- get_data(movie.pc)
country.pc.data <- get_data(country.pc)
write.csv(movie.pc.data, file = "../../output/data/movie.pc.data.csv")
write.csv(country.pc.data, file = "../../output/data/country.pc.data.csv")
View(movie.pc.data)
View(country.pc.data)
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
scatterD3(data = movie.stats, x = "score.mean", y = "score.sd", lab = title, labels_size = 20)
library("Rtsne")
# source("../../src/r/kmeans.r")
source("../../src/r/gmm.r")
movie.rtsne <- Rtsne(movie.pc.data, dims = 2, initial_dims = 23, perplexity = 5,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE, Y_init = NULL)
movie.rtsne.res <- as.data.frame(movie.rtsne$Y)
movie.rtsne.res$title <- movie.gmm.clusters$title
movie.rtsne.res$cluster <- movie.gmm.clusters$`gmm$classification`
scatterD3(data = movie.rtsne.res, x = V1, y = V2, lab = title, col_var = cluster, labels_size = 20)
scatterD3(data = movie.stats[1:10,], x = score.mean, y = score.sd, lab = title, labels_size = 20)
scatterD3(data = movie.stats[1:3,], x = score.mean, y = score.sd, lab = title, labels_size = 20)
str(movie.stats)
scatterD3(data = movie.stats, x = movie.stats$score.mean, y = movie.stats$score.sd, lab = title, labels_size = 20)
plot(movie.stats$score.mean, movie.stats$score.sd)
plot(movie.stats$score.mean, movie.stats$score.sd, labels(movie.stats$title))
plot(movie.stats$score.mean, movie.stats$score.sd, labels = movie.stats$title)
install.packages("car")
library("car")
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = title)
scatterplot( score.mean ~ score.sd, data = movie.stats)
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = movie.stats$title)
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = movie.stats$title)
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = movie.stats$title)
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = title)
scatterplot( score.mean ~ score.sd, data = movie.stats, labels = "title")
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
View(data)
scatterD3(data = data, x = gross.score, y = gross, lab = title, labels_size = 20)
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
movie.stats <- as.data.frame(movie.stats)
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 20)
scatterD3(data = movie.stats, x = score.mean, y = score.sd, lab = title, labels_size = 24)
scatterD3(data = movie.rtsne.res, x = V1, y = V2, lab = title, col_var = cluster, labels_size = 25)
library("Rtsne")
source("../../src/r/gmm.r")
movie.rtsne <- Rtsne(movie.pc.data, dims = 2, initial_dims = 23, perplexity = 5,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE, Y_init = NULL)
movie.rtsne.res <- as.data.frame(movie.rtsne$Y)
movie.rtsne.res$title <- movie.gmm.clusters$title
movie.rtsne.res$cluster <- movie.gmm.clusters$`gmm$classification`
scatterD3(data = movie.rtsne.res, x = V1, y = V2, lab = title, col_var = cluster, labels_size = 25)
country.rtsne <- Rtsne(country.pc.data, dims = 2, initial_dims = 23, perplexity = 5,
theta = 0.5, check_duplicates = FALSE, pca = TRUE, max_iter = 1000,
verbose = FALSE, is_distance = FALSE, Y_init = NULL)
country.rtsne.res <- as.data.frame(country.rtsne$Y)
country.rtsne.res$country <- country.gmm.clusters$country
country.rtsne.res$cluster <- country.gmm.clusters$`gmm$classification`
scatterD3(data = country.rtsne.res, x = V1, y = V2, lab = country, col_var = cluster, labels_size = 20)
scatterD3(data = country.rtsne.res, x = V1, y = V2, lab = country, col_var = cluster, labels_size = 25)
source("../../src/r/pca.r")
movie.score.matrix <- as.data.frame(movie.score.matrix)
movie.score.matrix.scale <- scale(movie.score.matrix, center = TRUE, scale = TRUE)
movie.score.matrix.dist <- dist(movie.score.matrix.scale, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
movie.score.matrix.hclust <- hclust(movie.score.matrix.dist, method = "ward.D2")
movie.score.matrix <- rownames_to_column(movie.score.matrix, var = "title")
plot(movie.score.matrix.hclust, hang = -1, cex = 1.2, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 1.6, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 1.4, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 1.3, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 0.6, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 0.8, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 1.2, labels = movie.score.matrix$title)
plot(movie.score.matrix.hclust, hang = -1, cex = 1.6, labels = movie.score.matrix$title)
